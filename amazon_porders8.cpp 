amazon_porders8.cpp 
#include <iostream>
#include <string>
#include <fstream>
using namespace std;

//Create a class to keep track of oredr record details
class order_record
{
   //Member variables
public:
   string cell_number;
   string item_number;
   double quantity;
   double price;
   int processing_plant;
   double tax_rate;
   double order_tax;
   double net_cost;
   double total_cost;
};


//Prototypes

void initialize(order_record * & INV, int & count, int & size);
bool is_Empty(int count);
bool is_full(int count, int size);
int search(order_record * INV, int count, string key);
void add(order_record * & INV, int & count, int & size);
void remove(order_record * INV, int & count, string key);
void double_size(order_record * & INV, int count, int & size);
void process(order_record * INV, int count);
void print(const order_record * INV, const int count);
void destroy_INV(order_record * & INV, int & count, int & size);

//Function Implementations will go here
/*************************************************************************************************************************************************/
//Name: initialize
//Precondition:
//Postcondition:
//Decription: Reads the data file of call information (cell number, item_number, quantity, price, and processing_plant) into the dynamic
//array of call record, INV. If the count because equal to the size the function double_size is called and the memory allocated to INV is doubled.
/***********************************************************************************************************************************************/
void initialize(order_record * & INV, int & count, int & size)
{
   ifstream in;
   in.open("purchase_data8.txt");
   while (!in.eof())
   {
       if (count < size) {
           in >> INV[count].cell_number >> INV[count].item_number >> INV[count].quantity >> INV[count].price >> INV[count].processing_plant;
           count++;
       }
       else {
           double_size(INV, count, size);
           in >> INV[count].cell_number >> INV[count].item_number >> INV[count].quantity >> INV[count].price >> INV[count].processing_plant;
           count++;
       }
   }
   in.close();
}

/**********************************************************************************************************************************/
//Name: is_Empty
//Precondition:
//Postcondition:
//Decription: returns true if INV is empty
/*********************************************************************************************************************************/
bool is_Empty(int count)
{
   return count == 0;
}

/**********************************************************************************************************************************/
//Name: Is_full
//Precondition:
//Postcondition:
//Decription: returns true if INV is full
/*********************************************************************************************************************************/
bool is_full(int count, int size)
{
   return count == size;
}


/**********************************************************************************************************************************/
//Name: search
//Precondition:
//Postcondition:
//Decription: locates key in INV if it is there; otherwise -1 is returned
/*********************************************************************************************************************************/
int search(order_record * INV, int count, string key)
{
   for (int i = 0; i < count; i++) {
       if (INV[i].cell_number == key) {
           return i;
       }
   }
   return -1;
}


/*********************************************************************************************************************************/
//Name: add
//Precondition:
//Postcondition:
//Decription: adds a new record to INV; if INV is full, double_size is called to increase the capacity of INV.
/********************************************************************************************************************************/
void add(order_record * & INV, int & count, int & size)
{
   //you add code
   if (count < size) {
       cout << "Enter customer cell number: ";
       cin >> INV[count].cell_number;
       cout << "Enter item number: ";
       cin >> INV[count].item_number;
       cout << "Enter quantity of item: ";
       cin >> INV[count].quantity;
       cout << "Enter price of the item: ";
       cin >> INV[count].price;
       cout << "Enter processing plant: ";
       cin >> INV[count].processing_plant;
       count++;
   }
   else {
       double_size(INV, count, size);
       cout << "Enter customer cell number: ";
       cin >> INV[count].cell_number;
       cout << "Enter item number: ";
       cin >> INV[count].item_number;
       cout << "Enter quantity of item: ";
       cin >> INV[count].quantity;
       cout << "Enter price of the item: ";
       cin >> INV[count].price;
       cout << "Enter processing plant: ";
       cin >> INV[count].processing_plant;
       count++;
   }
   process(INV, count);
}


/********************************************************************************************************************************/
//Name: Remove
//Precondition:
//Postcondition:
//Decription: remove all occurences of key from INV if it is there.
/*******************************************************************************************************************************/
void remove(order_record * INV, int & count, string key)
{
   //you add code
   for (int i = 0; i < count; i++) {
       if (INV[i].cell_number == key) {
           for (int j = i; j < count - 1; j++) {
               INV[j] = INV[j + 1];
           }
           count--;
       }
   }
}

/******************************************************************************************************************************/
//Name: double_size
//Precondition:
//Postcondition:
//Decription: doubles the size (capacity) of INV
/******************************************************************************************************************************/
void double_size(order_record * & INV, int count, int & size)
{
   //you add code
   order_record * temp = new order_record[2 * size];
   for (int i = 0; i < size; i++) {
       temp[i] = INV[i];
   }
   size = 2 * size;
   delete[] INV;
   INV= new order_record[size];
   for (int i = 0; i < count; i++) {
       INV[i]= temp[i];
   }
}

/******************************************************************************************************************************/
//Name: process
//Precondition:
//Postcondition:
//Decription: calculate the net cost, tax rate, order tax and total cost for every order record in INV.
/*****************************************************************************************************************************/
void process(order_record * INV, int count)
{
   //you add code
   for (int i = 0; i < count; i++) {
       if (INV[i].processing_plant >= 0 && INV[i].processing_plant <= 50) {
           INV[i].tax_rate = 6;
       }
       else if (INV[i].processing_plant >= 51 && INV[i].processing_plant <= 110) {
           INV[i].tax_rate = 7;
       }
       else if (INV[i].processing_plant >= 111 && INV[i].processing_plant <= 200) {
           INV[i].tax_rate = 8;
       }
       else if (INV[i].processing_plant >= 201 && INV[i].processing_plant <= 500) {
           INV[i].tax_rate = 9;
       }
       else {
           INV[i].tax_rate = 11;
       }
       INV[i].order_tax = INV[i].quantity*INV[i].price*(INV[i].tax_rate / 100);
       INV[i].net_cost = INV[i].quantity*INV[i].price;
       INV[i].total_cost = INV[i].net_cost + INV[i].order_tax;
   }
  
}

/****************************************************************************************************************************/
//Name: print
//Precondition:
//Postcondition:
//Decription: prints every field of every order_record in INV formatted to the screen.
/***************************************************************************************************************************/
void print(const order_record * INV, const int count)
{
   ofstream output;
   output.open("purchase8_results.txt");
   output.setf(ios::fixed);
   output.setf(ios::showpoint);
   output.precision(2);

   //you add code
   for (int i = 0; i < count; i++) {
       output << INV[i].cell_number << "\t" << INV[i].item_number << "\t" << INV[i].quantity << "\t" << INV[i].price
           << "\t" << INV[i].processing_plant << "\t" << INV[i].tax_rate << "\t" << INV[i].order_tax << "\t" << INV[i].net_cost
           << "\t" << INV[i].total_cost << endl;
   }
   output.close();
}


/****************************************************************************************************************************/
//Name: destroy_INV
//Precondition:
//Postcondition:
//Decription: de-allocates all memory allocated to INV. This should be the last function to be called before the program
//            is exited.
/***************************************************************************************************************************/
void destroy_INV(order_record * & INV, int & count, int & size)
{
   //you add code
   delete[] INV;
   size = 0;
   count = 0;
}


//Here is your driver to test the program
int main()
{
   int count = 0; //intializating count
   int size = 5;
   order_record * INV = new order_record[size]; //declaring the dynamic array and allocate memory for one record

   cout << "**********************************************************************\n";
   //Test 1:
   //void initialize(order_record * & INV, int & count, int & size);
   cout << "Test 1: Testing initialize, double_size, process, is_full and print " << endl;
   initialize(INV, count, size);
   process(INV, count);
   print(INV, count);
   cout << "End of Test 1" << endl;
   cout << "**********************************************************************\n";
   cout << "**********************************************************************\n";
   ////Test 2:
   //void add(order_record * & INV, int & count, int & size);
   cout << "Test 2: Testing add, double_size, process, is_full, and print " << endl;
   add(INV, count, size);
   print(INV, count);
   cout << "End of Test 2" << endl;
   cout << "**********************************************************************\n";
   cout << "**********************************************************************\n";
   ////Test 3:
   //void remove(order_record * INV, int & count, string key);
   cout << "Test 3: Testing remove, is_Empty, search and print " << endl;
   cout << "Removing 9546321555\n";
   remove(INV, count, "9546321555");
   print(INV, count);
   cout << "Removing 787716590\n";
   remove(INV, count, "7877176590");
   print(INV, count);
   cout << "Removing 3051234567\n";
   print(INV, count);
   cout << "Removing 9546321555 ---AGAIN--- SHOULD GET MESSAGE\n";
   print(INV, count);
   cout << "End of Test 3" << endl;
   cout << "**********************************************************************\n";
   cout << "**********************************************************************\n";
   ////Test 4:
   //void destroy_INV(order_record * INV, int & count, int & size);
   cout << "Test 4: destroy_INV and print " << endl;
   destroy_INV(INV, count, size);
   cout << "size = " << size << endl;
   cout << " count = " << count << endl;
   print(INV, count);
   cout << "End of Test 4" << endl;
   cout << "**********************************************************************\n";
   cout << "**********************************************************************\n";
   return 0;
}